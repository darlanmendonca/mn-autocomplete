{"version":3,"sources":["scripts/mn-autocomplete.class.js"],"names":["MnAutocomplete","self","_this","_ret","_classCallCheck","this","input","querySelector","menu","setFilter","setOnFocus","setValidate","_possibleConstructorReturn","testRegex","search","value","RegExp","split","join","test","_this2","addEventListener","options","Array","from","querySelectorAll","forEach","option","textContent","classList","remove","add","scrollTop","validateChip","_this3","screen","width","offsetTop","getBoundingClientRect","top","window","pageYOffset","document","documentElement","clientTop","scrollTo","body","MnChips","customElements","define"],"mappings":"sxCAAMA,eAAAA,SAAAA,iBACJ,QAAAA,gBAAYC,MAAM,GAAAC,OAAAC,IAUhB,OAVgBC,iBAAAC,KAAAL,gBAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,eAAAA,WAAAA,OAAAA,eAAAA,iBAAAA,KAAAA,KAAaA,OAEbC,MAAKI,MAAQJ,MAAKK,cAAc,SAChCL,MAAKM,KAAON,MAAKK,cAAc,QAE/BL,MAAKO,YACLP,MAAKQ,aACLR,MAAKS,cAELR,KAAOF,KAAPW,2BAAAV,MAAAC,sHA2BA,QAASU,WAAUC,OAAQC,OAEzB,MADY,IAAIC,QAAOF,OAAOG,MAAM,IAAIC,KAAK,MAAO,KACzCC,KAAKJ,OA1BR,GAAAK,QAAAf,IACVA,MAAKC,MAAMe,iBAAiB,QAAS,WACnC,GAAMN,OAAQK,OAAKd,MAAMS,MACnBO,QAAUC,MAAMC,KAAKJ,OAAKZ,KAAKiB,iBAAiB,cAClDV,OACFO,QAAQI,QAAQ,SAAAC,QACMd,UAAUE,MAAOY,OAAOC,aAExCD,OAAOE,UAAUC,OAAO,UACxBH,OAAOE,UAAUE,IAAI,YAG3BX,OAAKZ,KAAKiB,iBAAiB,qBAAqBC,QAAQ,SAAAC,QAAA,MAAUA,QAAOE,UAAUC,OAAO,cAI9FzB,KAAKC,MAAMe,iBAAiB,OAAQ,WAClCD,OAAKZ,KACFiB,iBAAiB,qBACjBC,QAAQ,SAAAC,QAAA,MAAUA,QAAOE,UAAUC,OAAO,YAE7CV,OAAKZ,KAAKwB,UAAY,0CAYxB,QAASC,gBACP,OAAO,EAHT5B,KAAK4B,aAAeA,kDAOT,GAAAC,QAAA7B,IACU8B,QAAOC,MAAQ,KAElC/B,KAAKC,MAAMe,iBAAiB,QAAS,WACnC,GAAMgB,WAAYH,OAAK5B,MAAMgC,wBAAwBC,IAAM,GACvDC,OAAOC,YACPC,SAASC,gBAAgBC,SAE7BJ,QAAOK,SAAS,EAAGR,WACnBK,SAASI,KAAKd,UAAYK,gCA7DLG,OAAOO,QAmEpCP,QAAOQ,eAAeC,OAAO,kBAAmBjD","file":"mn-autocomplete.js","sourcesContent":["class MnAutocomplete extends window.MnChips {\n  constructor(self) {\n    self = super(self)\n\n    this.input = this.querySelector('input')\n    this.menu = this.querySelector('menu')\n\n    this.setFilter()\n    this.setOnFocus()\n    this.setValidate()\n\n    return self\n  }\n\n  setFilter() {\n    this.input.addEventListener('keyup', () => {\n      const value = this.input.value\n      const options = Array.from(this.menu.querySelectorAll('.mn-option'))\n      if (value) {\n        options.forEach(option => {\n          const matchOption = testRegex(value, option.textContent)\n          matchOption\n            ? option.classList.remove('hidden')\n            : option.classList.add('hidden')\n        })\n      } else {\n        this.menu.querySelectorAll('.mn-option.hidden').forEach(option => option.classList.remove('hidden'))\n      }\n    })\n\n    this.input.addEventListener('blur', () => {\n      this.menu\n        .querySelectorAll('.mn-option.hidden')\n        .forEach(option => option.classList.remove('hidden'))\n\n      this.menu.scrollTop = 0\n    })\n\n    function testRegex(search, value) {\n      const reg = new RegExp(search.split('').join('.*'), 'i')\n      return reg.test(value)\n    }\n  }\n\n  setValidate() {\n    this.validateChip = validateChip\n\n    function validateChip() {\n      return false\n    }\n  }\n\n  setOnFocus() {\n    const mobileDevice = screen.width < 768\n    if (mobileDevice) {\n      this.input.addEventListener('focus', () => {\n        const offsetTop = this.input.getBoundingClientRect().top - 20\n          + window.pageYOffset\n          - document.documentElement.clientTop\n\n        window.scrollTo(0, offsetTop)\n        document.body.scrollTop = offsetTop\n      })\n    }\n  }\n}\n\nwindow.customElements.define('mn-autocomplete', MnAutocomplete)\n"]}