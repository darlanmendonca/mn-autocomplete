{"version":3,"sources":["scripts/mn-autocomplete.class.js"],"names":["MnAutocomplete","self","_this","_ret","_classCallCheck","this","input","querySelector","menu","setFilter","setMenu","setOnFocus","_possibleConstructorReturn","_this2","document","addEventListener","event","target","classList","contains","closest","addChip","textContent","testRegex","search","value","RegExp","split","join","test","_this3","options","Array","from","querySelectorAll","forEach","option","remove","add","scrollTop","_this4","screen","width","offsetTop","getBoundingClientRect","top","window","pageYOffset","documentElement","clientTop","scrollTo","body","MnChips","customElements","define"],"mappings":"sxCAAMA,eAAAA,SAAAA,iBACJ,QAAAA,gBAAYC,MAAM,GAAAC,OAAAC,IAUhB,OAVgBC,iBAAAC,KAAAL,gBAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,eAAAA,WAAAA,OAAAA,eAAAA,iBAAAA,KAAAA,KAAaA,OAEbC,MAAKI,MAAQJ,MAAKK,cAAc,SAChCL,MAAKM,KAAON,MAAKK,cAAc,QAE/BL,MAAKO,YACLP,MAAKQ,UACLR,MAAKS,aAELR,KAAOF,KAAPW,2BAAAV,MAAAC,oHAGQ,GAAAU,QAAAR,IACRS,UAASC,iBAAiB,YAAa,SAAAC,OACpBA,MAAMC,OAAOC,UAAUC,SAAS,cAC5CH,MAAMC,OAAOG,QAAQ,oBAGxBP,OAAKQ,QAAQL,MAAMC,OAAOK,mDA6B9B,QAASC,WAAUC,OAAQC,OAEzB,MADY,IAAIC,QAAOF,OAAOG,MAAM,IAAIC,KAAK,MAAO,KACzCC,KAAKJ,OA1BR,GAAAK,QAAAzB,IACVA,MAAKC,MAAMS,iBAAiB,QAAS,WACnC,GAAMU,OAAQK,OAAKxB,MAAMmB,MACnBM,QAAUC,MAAMC,KAAKH,OAAKtB,KAAK0B,iBAAiB,cAClDT,OACFM,QAAQI,QAAQ,SAAAC,QACMb,UAAUE,MAAOW,OAAOd,aAExCc,OAAOlB,UAAUmB,OAAO,UACxBD,OAAOlB,UAAUoB,IAAI,YAG3BR,OAAKtB,KAAK0B,iBAAiB,qBAAqBC,QAAQ,SAAAC,QAAA,MAAUA,QAAOlB,UAAUmB,OAAO,cAI9FhC,KAAKC,MAAMS,iBAAiB,OAAQ,WAClCe,OAAKtB,KACF0B,iBAAiB,qBACjBC,QAAQ,SAAAC,QAAA,MAAUA,QAAOlB,UAAUmB,OAAO,YAE7CP,OAAKtB,KAAK+B,UAAY,yCASb,GAAAC,QAAAnC,IACUoC,QAAOC,MAAQ,KAElCrC,KAAKC,MAAMS,iBAAiB,QAAS,WACnC,GAAM4B,WAAYH,OAAKlC,MAAMsC,wBAAwBC,IAAM,GACvDC,OAAOC,YACPjC,SAASkC,gBAAgBC,SAE7BH,QAAOI,SAAS,EAAGP,WACnB7B,SAASqC,KAAKZ,UAAYI,gCAhELG,OAAOM,QAsEpCN,QAAOO,eAAeC,OAAO,kBAAmBtD","file":"mn-autocomplete.js","sourcesContent":["class MnAutocomplete extends window.MnChips {\n  constructor(self) {\n    self = super(self)\n\n    this.input = this.querySelector('input')\n    this.menu = this.querySelector('menu')\n\n    this.setFilter()\n    this.setMenu()\n    this.setOnFocus()\n\n    return self\n  }\n\n  setMenu() {\n    document.addEventListener('mousedown', event => {\n      const isOption = event.target.classList.contains('mn-option')\n        && event.target.closest('mn-autocomplete')\n\n      if (isOption) {\n        this.addChip(event.target.textContent)\n      }\n    })\n  }\n\n  setFilter() {\n    this.input.addEventListener('keyup', () => {\n      const value = this.input.value\n      const options = Array.from(this.menu.querySelectorAll('.mn-option'))\n      if (value) {\n        options.forEach(option => {\n          const matchOption = testRegex(value, option.textContent)\n          matchOption\n            ? option.classList.remove('hidden')\n            : option.classList.add('hidden')\n        })\n      } else {\n        this.menu.querySelectorAll('.mn-option.hidden').forEach(option => option.classList.remove('hidden'))\n      }\n    })\n\n    this.input.addEventListener('blur', () => {\n      this.menu\n        .querySelectorAll('.mn-option.hidden')\n        .forEach(option => option.classList.remove('hidden'))\n\n      this.menu.scrollTop = 0\n    })\n\n    function testRegex(search, value) {\n      const reg = new RegExp(search.split('').join('.*'), 'i')\n      return reg.test(value)\n    }\n  }\n\n  setOnFocus() {\n    const mobileDevice = screen.width < 768\n    if (mobileDevice) {\n      this.input.addEventListener('focus', () => {\n        const offsetTop = this.input.getBoundingClientRect().top - 20\n          + window.pageYOffset\n          - document.documentElement.clientTop\n\n        window.scrollTo(0, offsetTop)\n        document.body.scrollTop = offsetTop\n      })\n    }\n  }\n}\n\nwindow.customElements.define('mn-autocomplete', MnAutocomplete)\n"]}