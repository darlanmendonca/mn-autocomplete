{"version":3,"sources":["scripts/mn-autocomplete.class.js"],"names":["MnAutocomplete","self","_this","_ret","_classCallCheck","this","input","querySelector","menu","setMenu","setOnFocus","_possibleConstructorReturn","values","options","cloneNode","querySelectorAll","Array","from","map","option","getAttribute","innerHTML","select","join","insertAdjacentHTML","_this2","screen","width","addEventListener","offsetTop","getBoundingClientRect","top","window","pageYOffset","document","documentElement","clientTop","scrollTo","body","scrollTop","MnChips","customElements","define"],"mappings":"sxCAAMA,eAAAA,SAAAA,iBACJ,QAAAA,gBAAYC,MAAM,GAAAC,OAAAC,IAShB,OATgBC,iBAAAC,KAAAL,gBAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,eAAAA,WAAAA,OAAAA,eAAAA,iBAAAA,KAAAA,KAAaA,OAEbC,MAAKI,MAAQJ,MAAKK,cAAc,SAChCL,MAAKM,KAAON,MAAKK,cAAc,QAE/BL,MAAKO,UACLP,MAAKQ,aAELP,KAAOF,KAAPU,2BAAAT,MAAAC,oHAIA,GAAMS,QAASP,KAAKE,cAAc,WAC9BM,QAAUR,KACXE,cAAc,WACdO,WAAU,GACVC,iBAAiB,YACpBF,SAAUG,MACPC,KAAKJ,SACLK,IAAI,SAAAC,QAAA,MAAA,kBAA4BA,OAAOC,aAAa,SAAhD,KAA6DD,OAAOC,aAAa,eAAjF,cAEPR,OAAOS,UAAY,EAEnB,IAAMC,QAAAA,iCAA0CT,QAAQU,KAAK,IAAvD,cACNlB,MAAKmB,mBAAmB,YAAaF,6CAG1B,GAAAG,QAAApB,IACUqB,QAAOC,MAAQ,KAElCtB,KAAKC,MAAMsB,iBAAiB,QAAS,WACnC,GAAMC,WAAYJ,OAAKnB,MAAMwB,wBAAwBC,IAAM,GACvDC,OAAOC,YACPC,SAASC,gBAAgBC,SAE7BJ,QAAOK,SAAS,EAAGR,WACnBK,SAASI,KAAKC,UAAYV,gCAtCLG,OAAOQ,QA4CpCR,QAAOS,eAAeC,OAAO,kBAAmB1C","file":"mn-autocomplete.js","sourcesContent":["class MnAutocomplete extends window.MnChips {\n  constructor(self) {\n    self = super(self)\n\n    this.input = this.querySelector('input')\n    this.menu = this.querySelector('menu')\n\n    this.setMenu()\n    this.setOnFocus()\n\n    return self\n  }\n\n  setMenu() {\n    const values = this.querySelector('.values')\n    let options = this\n      .querySelector('.values')\n      .cloneNode(true)\n      .querySelectorAll('mn-option')\n    options = Array\n      .from(options)\n      .map(option => `<option value=\"${option.getAttribute('value')}\">${option.getAttribute('placeholder')}</option>`)\n\n    values.innerHTML = ''\n\n    const select = `<mn-select placeholder=\"test\">${options.join('')}</mn-select>`\n    this.insertAdjacentHTML('beforeend', select)\n  }\n\n  setOnFocus() {\n    const mobileDevice = screen.width < 768\n    if (mobileDevice) {\n      this.input.addEventListener('focus', () => {\n        const offsetTop = this.input.getBoundingClientRect().top - 20\n          + window.pageYOffset\n          - document.documentElement.clientTop\n\n        window.scrollTo(0, offsetTop)\n        document.body.scrollTop = offsetTop\n      })\n    }\n  }\n}\n\nwindow.customElements.define('mn-autocomplete', MnAutocomplete)\n"]}