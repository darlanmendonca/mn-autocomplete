{"version":3,"sources":["scripts/mn-autocomplete.class.js"],"names":["MnAutocomplete","self","_this","_ret","_classCallCheck","this","input","querySelector","select","undefined","menu","validateChip","hasValidOption","setMenu","setFilter","setOnFocus","_possibleConstructorReturn","value","option","getAttribute","placeholder","textContent","optionFocused","Boolean","_this2","addEventListener","event","key","filter","values","options","cloneNode","querySelectorAll","Array","from","map","innerHTML","join","insertAdjacentHTML","container","_this3","mobileDevice","screen","width","offsetTop","getBoundingClientRect","top","window","pageYOffset","document","documentElement","clientTop","scrollTo","body","scrollTop","open","classList","contains","MnChips","customElements","define"],"mappings":"sxCAAMA,eAAAA,SAAAA,iBACJ,QAAAA,gBAAYC,MAAM,GAAAC,OAAAC,IAYhB,OAZgBC,iBAAAC,KAAAL,gBAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,eAAAA,WAAAA,OAAAA,eAAAA,iBAAAA,KAAAA,KAAaA,OAEbC,MAAKI,MAAQJ,MAAKK,cAAc,SAChCL,MAAKM,WAASC,GACdP,MAAKQ,KAAOR,MAAKK,cAAc,QAC/BL,MAAKS,aAAeT,MAAKU,eAEzBV,MAAKW,UACLX,MAAKY,YACLZ,MAAKa,aAELZ,KAAOF,KAAPe,2BAAAd,MAAAC,yHAGac,OACb,GAAIZ,KAAKG,OAAQ,CACf,GAAMU,QAASb,KAAKG,OAAOD,cAAc,uCACzCU,OAAQC,OACJA,OAAOC,aAAa,SACpBF,MAEN,MAAOA,oDAGYG,aACnB,GAAIf,KAAKG,OAAQ,CACf,GAAMU,QAASb,KAAKG,OAAOD,cAAc,uCACzCa,aAAcF,OACVA,OAAOG,YACPD,YAEN,MAAOA,sDAIP,GAAME,eAAgBjB,KAAKG,OAAOD,cAAc,uCAChD,OAAOgB,SAAQD,mDAGL,GAAAE,QAAAnB,IACVA,MAAKC,MAAMmB,iBAAiB,QAAS,SAACC,OAClB,WAAdA,MAAMC,MACRH,OAAKlB,MAAMW,MAAQ,IAGjBO,OAAKlB,MAAMW,OAASO,OAAKhB,OAAOoB,SAAWJ,OAAKlB,MAAMW,QACxDO,OAAKhB,OAAOoB,OAASJ,OAAKlB,MAAMW,2CAMpC,GAAMY,QAASxB,KAAKE,cAAc,WAC9BuB,QAAUzB,KACXE,cAAc,WACdwB,WAAU,GACVC,iBAAiB,YAEpBF,SAAUG,MACPC,KAAKJ,SACLK,IAAI,SAAAjB,QAAA,MAAA,kBAA4BA,OAAOC,aAAa,SAAhD,KAA6DD,OAAOC,aAAa,eAAjF,cAEPU,OAAOO,UAAY,EAEnB,IAAM5B,QAAAA,iCAA0CsB,QAAQO,KAAK,IAAvD,cACNhC,MAAKiC,mBAAmB,YAAa9B,QAErCH,KAAKG,OAASH,KAAKE,cAAc,aACjCF,KAAKG,OAAO+B,UAAY,uDAGb,GAAAC,QAAAnC,KACLoC,aAAeC,OAAOC,MAAQ,GAEpCtC,MAAKC,MAAMmB,iBAAiB,QAAS,WACnC,GAAIgB,aAAc,CAChB,GAAMG,WAAYJ,OAAKlC,MAAMuC,wBAAwBC,IAAM,GACvDC,OAAOC,YACPC,SAASC,gBAAgBC,SAE7BJ,QAAOK,SAAS,EAAGR,WACnBK,SAASI,KAAKC,UAAYV,UAE5BJ,OAAKhC,OAAO+C,SAGdlD,KAAKC,MAAMmB,iBAAiB,UAAW,WACpCe,OAAKhC,OAAOgD,UAAUC,SAAS,YAC5BjB,OAAKhC,OAAO+C,6BA1FOR,OAAOW,QAgGpCX,QAAOY,eAAeC,OAAO,kBAAmB5D","file":"mn-autocomplete.js","sourcesContent":["class MnAutocomplete extends window.MnChips {\n  constructor(self) {\n    self = super(self)\n\n    this.input = this.querySelector('input')\n    this.select = undefined\n    this.menu = this.querySelector('menu')\n    this.validateChip = this.hasValidOption\n\n    this.setMenu()\n    this.setFilter()\n    this.setOnFocus()\n\n    return self\n  }\n\n  transformValue(value) {\n    if (this.select) {\n      const option = this.select.querySelector('.mn-select-option.focus:not(.hidden)')\n      value = option\n        ? option.getAttribute('value')\n        : value\n    }\n    return value\n  }\n\n  transformPlaceholder(placeholder) {\n    if (this.select) {\n      const option = this.select.querySelector('.mn-select-option.focus:not(.hidden)')\n      placeholder = option\n        ? option.textContent\n        : placeholder\n    }\n    return placeholder\n  }\n\n  hasValidOption() {\n    const optionFocused = this.select.querySelector('.mn-select-option.focus:not(.hidden)')\n    return Boolean(optionFocused)\n  }\n\n  setFilter() {\n    this.input.addEventListener('keyup', (event) => {\n      if (event.key === 'Escape') {\n        this.input.value = ''\n      }\n\n      if (this.input.value && this.select.filter !== this.input.value) {\n        this.select.filter = this.input.value\n      }\n    })\n  }\n\n  setMenu() {\n    const values = this.querySelector('.values')\n    let options = this\n      .querySelector('.values')\n      .cloneNode(true)\n      .querySelectorAll('mn-option')\n\n    options = Array\n      .from(options)\n      .map(option => `<option value=\"${option.getAttribute('value')}\">${option.getAttribute('placeholder')}</option>`)\n\n    values.innerHTML = ''\n\n    const select = `<mn-select placeholder=\"test\">${options.join('')}</mn-select>`\n    this.insertAdjacentHTML('beforeend', select)\n\n    this.select = this.querySelector('mn-select')\n    this.select.container = 'mn-autocomplete'\n  }\n\n  setOnFocus() {\n    const mobileDevice = screen.width < 768\n\n    this.input.addEventListener('focus', () => {\n      if (mobileDevice) {\n        const offsetTop = this.input.getBoundingClientRect().top - 20\n          + window.pageYOffset\n          - document.documentElement.clientTop\n\n        window.scrollTo(0, offsetTop)\n        document.body.scrollTop = offsetTop\n      }\n      this.select.open()\n    })\n\n    this.input.addEventListener('keydown', () => {\n      !this.select.classList.contains('visible')\n        ? this.select.open()\n        : null\n    })\n  }\n}\n\nwindow.customElements.define('mn-autocomplete', MnAutocomplete)\n"]}